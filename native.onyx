package sqlite3_native
#library "onyx_sqlite3"

#if #defined(runtime.Generated_Foreign_Info) {
    foreign_block :: __foreign_block
}

/// GENERATED BY ONYX CBINDGEN

use core { cptr }
use runtime

#local __func_hack :: #distinct void

sqlite_int64 :: i64

sqlite_uint64 :: u64

sqlite3_int64 :: sqlite_int64

sqlite3_uint64 :: sqlite_uint64

sqlite3_callback :: cptr(__func_hack)

sqlite3_filename :: cptr(u8)

sqlite3_syscall_ptr :: cptr(__func_hack)

sqlite3_destructor_type :: cptr(__func_hack)

sqlite3_rtree_dbl :: f64

fts5_extension_function :: cptr(__func_hack)

unix :: 1
linux :: 1
SQLITE_VERSION :: "3.46.0"
SQLITE_VERSION_NUMBER :: 3046000
SQLITE_SOURCE_ID :: "2024-05-23 13:25:27 96c92aba00c8375bc32fafcdf12429c58bd8aabfcadab6683e35bbb9cdebalt1"
SQLITE_OK :: 0
SQLITE_ERROR :: 1
SQLITE_INTERNAL :: 2
SQLITE_PERM :: 3
SQLITE_ABORT :: 4
SQLITE_BUSY :: 5
SQLITE_LOCKED :: 6
SQLITE_NOMEM :: 7
SQLITE_READONLY :: 8
SQLITE_INTERRUPT :: 9
SQLITE_IOERR :: 10
SQLITE_CORRUPT :: 11
SQLITE_NOTFOUND :: 12
SQLITE_FULL :: 13
SQLITE_CANTOPEN :: 14
SQLITE_PROTOCOL :: 15
SQLITE_EMPTY :: 16
SQLITE_SCHEMA :: 17
SQLITE_TOOBIG :: 18
SQLITE_CONSTRAINT :: 19
SQLITE_MISMATCH :: 20
SQLITE_MISUSE :: 21
SQLITE_NOLFS :: 22
SQLITE_AUTH :: 23
SQLITE_FORMAT :: 24
SQLITE_RANGE :: 25
SQLITE_NOTADB :: 26
SQLITE_NOTICE :: 27
SQLITE_WARNING :: 28
SQLITE_ROW :: 100
SQLITE_DONE :: 101
SQLITE_OPEN_READONLY :: 0x00000001
SQLITE_OPEN_READWRITE :: 0x00000002
SQLITE_OPEN_CREATE :: 0x00000004
SQLITE_OPEN_DELETEONCLOSE :: 0x00000008
SQLITE_OPEN_EXCLUSIVE :: 0x00000010
SQLITE_OPEN_AUTOPROXY :: 0x00000020
SQLITE_OPEN_URI :: 0x00000040
SQLITE_OPEN_MEMORY :: 0x00000080
SQLITE_OPEN_MAIN_DB :: 0x00000100
SQLITE_OPEN_TEMP_DB :: 0x00000200
SQLITE_OPEN_TRANSIENT_DB :: 0x00000400
SQLITE_OPEN_MAIN_JOURNAL :: 0x00000800
SQLITE_OPEN_TEMP_JOURNAL :: 0x00001000
SQLITE_OPEN_SUBJOURNAL :: 0x00002000
SQLITE_OPEN_SUPER_JOURNAL :: 0x00004000
SQLITE_OPEN_NOMUTEX :: 0x00008000
SQLITE_OPEN_FULLMUTEX :: 0x00010000
SQLITE_OPEN_SHAREDCACHE :: 0x00020000
SQLITE_OPEN_PRIVATECACHE :: 0x00040000
SQLITE_OPEN_WAL :: 0x00080000
SQLITE_OPEN_NOFOLLOW :: 0x01000000
SQLITE_OPEN_EXRESCODE :: 0x02000000
SQLITE_OPEN_MASTER_JOURNAL :: 0x00004000
SQLITE_IOCAP_ATOMIC :: 0x00000001
SQLITE_IOCAP_ATOMIC512 :: 0x00000002
SQLITE_IOCAP_ATOMIC1K :: 0x00000004
SQLITE_IOCAP_ATOMIC2K :: 0x00000008
SQLITE_IOCAP_ATOMIC4K :: 0x00000010
SQLITE_IOCAP_ATOMIC8K :: 0x00000020
SQLITE_IOCAP_ATOMIC16K :: 0x00000040
SQLITE_IOCAP_ATOMIC32K :: 0x00000080
SQLITE_IOCAP_ATOMIC64K :: 0x00000100
SQLITE_IOCAP_SAFE_APPEND :: 0x00000200
SQLITE_IOCAP_SEQUENTIAL :: 0x00000400
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN :: 0x00000800
SQLITE_IOCAP_POWERSAFE_OVERWRITE :: 0x00001000
SQLITE_IOCAP_IMMUTABLE :: 0x00002000
SQLITE_IOCAP_BATCH_ATOMIC :: 0x00004000
SQLITE_LOCK_NONE :: 0
SQLITE_LOCK_SHARED :: 1
SQLITE_LOCK_RESERVED :: 2
SQLITE_LOCK_PENDING :: 3
SQLITE_LOCK_EXCLUSIVE :: 4
SQLITE_SYNC_NORMAL :: 0x00002
SQLITE_SYNC_FULL :: 0x00003
SQLITE_SYNC_DATAONLY :: 0x00010
SQLITE_FCNTL_LOCKSTATE :: 1
SQLITE_FCNTL_GET_LOCKPROXYFILE :: 2
SQLITE_FCNTL_SET_LOCKPROXYFILE :: 3
SQLITE_FCNTL_LAST_ERRNO :: 4
SQLITE_FCNTL_SIZE_HINT :: 5
SQLITE_FCNTL_CHUNK_SIZE :: 6
SQLITE_FCNTL_FILE_POINTER :: 7
SQLITE_FCNTL_SYNC_OMITTED :: 8
SQLITE_FCNTL_WIN32_AV_RETRY :: 9
SQLITE_FCNTL_PERSIST_WAL :: 10
SQLITE_FCNTL_OVERWRITE :: 11
SQLITE_FCNTL_VFSNAME :: 12
SQLITE_FCNTL_POWERSAFE_OVERWRITE :: 13
SQLITE_FCNTL_PRAGMA :: 14
SQLITE_FCNTL_BUSYHANDLER :: 15
SQLITE_FCNTL_TEMPFILENAME :: 16
SQLITE_FCNTL_MMAP_SIZE :: 18
SQLITE_FCNTL_TRACE :: 19
SQLITE_FCNTL_HAS_MOVED :: 20
SQLITE_FCNTL_SYNC :: 21
SQLITE_FCNTL_COMMIT_PHASETWO :: 22
SQLITE_FCNTL_WIN32_SET_HANDLE :: 23
SQLITE_FCNTL_WAL_BLOCK :: 24
SQLITE_FCNTL_ZIPVFS :: 25
SQLITE_FCNTL_RBU :: 26
SQLITE_FCNTL_VFS_POINTER :: 27
SQLITE_FCNTL_JOURNAL_POINTER :: 28
SQLITE_FCNTL_WIN32_GET_HANDLE :: 29
SQLITE_FCNTL_PDB :: 30
SQLITE_FCNTL_BEGIN_ATOMIC_WRITE :: 31
SQLITE_FCNTL_COMMIT_ATOMIC_WRITE :: 32
SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE :: 33
SQLITE_FCNTL_LOCK_TIMEOUT :: 34
SQLITE_FCNTL_DATA_VERSION :: 35
SQLITE_FCNTL_SIZE_LIMIT :: 36
SQLITE_FCNTL_CKPT_DONE :: 37
SQLITE_FCNTL_RESERVE_BYTES :: 38
SQLITE_FCNTL_CKPT_START :: 39
SQLITE_FCNTL_EXTERNAL_READER :: 40
SQLITE_FCNTL_CKSM_FILE :: 41
SQLITE_FCNTL_RESET_CACHE :: 42
SQLITE_ACCESS_EXISTS :: 0
SQLITE_ACCESS_READWRITE :: 1
SQLITE_ACCESS_READ :: 2
SQLITE_SHM_UNLOCK :: 1
SQLITE_SHM_LOCK :: 2
SQLITE_SHM_SHARED :: 4
SQLITE_SHM_EXCLUSIVE :: 8
SQLITE_SHM_NLOCK :: 8
SQLITE_CONFIG_SINGLETHREAD :: 1
SQLITE_CONFIG_MULTITHREAD :: 2
SQLITE_CONFIG_SERIALIZED :: 3
SQLITE_CONFIG_MALLOC :: 4
SQLITE_CONFIG_GETMALLOC :: 5
SQLITE_CONFIG_SCRATCH :: 6
SQLITE_CONFIG_PAGECACHE :: 7
SQLITE_CONFIG_HEAP :: 8
SQLITE_CONFIG_MEMSTATUS :: 9
SQLITE_CONFIG_MUTEX :: 10
SQLITE_CONFIG_GETMUTEX :: 11
SQLITE_CONFIG_LOOKASIDE :: 13
SQLITE_CONFIG_PCACHE :: 14
SQLITE_CONFIG_GETPCACHE :: 15
SQLITE_CONFIG_LOG :: 16
SQLITE_CONFIG_URI :: 17
SQLITE_CONFIG_PCACHE2 :: 18
SQLITE_CONFIG_GETPCACHE2 :: 19
SQLITE_CONFIG_COVERING_INDEX_SCAN :: 20
SQLITE_CONFIG_SQLLOG :: 21
SQLITE_CONFIG_MMAP_SIZE :: 22
SQLITE_CONFIG_WIN32_HEAPSIZE :: 23
SQLITE_CONFIG_PCACHE_HDRSZ :: 24
SQLITE_CONFIG_PMASZ :: 25
SQLITE_CONFIG_STMTJRNL_SPILL :: 26
SQLITE_CONFIG_SMALL_MALLOC :: 27
SQLITE_CONFIG_SORTERREF_SIZE :: 28
SQLITE_CONFIG_MEMDB_MAXSIZE :: 29
SQLITE_CONFIG_ROWID_IN_VIEW :: 30
SQLITE_DBCONFIG_MAINDBNAME :: 1000
SQLITE_DBCONFIG_LOOKASIDE :: 1001
SQLITE_DBCONFIG_ENABLE_FKEY :: 1002
SQLITE_DBCONFIG_ENABLE_TRIGGER :: 1003
SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER :: 1004
SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION :: 1005
SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE :: 1006
SQLITE_DBCONFIG_ENABLE_QPSG :: 1007
SQLITE_DBCONFIG_TRIGGER_EQP :: 1008
SQLITE_DBCONFIG_RESET_DATABASE :: 1009
SQLITE_DBCONFIG_DEFENSIVE :: 1010
SQLITE_DBCONFIG_WRITABLE_SCHEMA :: 1011
SQLITE_DBCONFIG_LEGACY_ALTER_TABLE :: 1012
SQLITE_DBCONFIG_DQS_DML :: 1013
SQLITE_DBCONFIG_DQS_DDL :: 1014
SQLITE_DBCONFIG_ENABLE_VIEW :: 1015
SQLITE_DBCONFIG_LEGACY_FILE_FORMAT :: 1016
SQLITE_DBCONFIG_TRUSTED_SCHEMA :: 1017
SQLITE_DBCONFIG_STMT_SCANSTATUS :: 1018
SQLITE_DBCONFIG_REVERSE_SCANORDER :: 1019
SQLITE_DBCONFIG_MAX :: 1019
SQLITE_DENY :: 1
SQLITE_IGNORE :: 2
SQLITE_CREATE_INDEX :: 1
SQLITE_CREATE_TABLE :: 2
SQLITE_CREATE_TEMP_INDEX :: 3
SQLITE_CREATE_TEMP_TABLE :: 4
SQLITE_CREATE_TEMP_TRIGGER :: 5
SQLITE_CREATE_TEMP_VIEW :: 6
SQLITE_CREATE_TRIGGER :: 7
SQLITE_CREATE_VIEW :: 8
SQLITE_DELETE :: 9
SQLITE_DROP_INDEX :: 10
SQLITE_DROP_TABLE :: 11
SQLITE_DROP_TEMP_INDEX :: 12
SQLITE_DROP_TEMP_TABLE :: 13
SQLITE_DROP_TEMP_TRIGGER :: 14
SQLITE_DROP_TEMP_VIEW :: 15
SQLITE_DROP_TRIGGER :: 16
SQLITE_DROP_VIEW :: 17
SQLITE_INSERT :: 18
SQLITE_PRAGMA :: 19
SQLITE_READ :: 20
SQLITE_SELECT :: 21
SQLITE_TRANSACTION :: 22
SQLITE_UPDATE :: 23
SQLITE_ATTACH :: 24
SQLITE_DETACH :: 25
SQLITE_ALTER_TABLE :: 26
SQLITE_REINDEX :: 27
SQLITE_ANALYZE :: 28
SQLITE_CREATE_VTABLE :: 29
SQLITE_DROP_VTABLE :: 30
SQLITE_FUNCTION :: 31
SQLITE_SAVEPOINT :: 32
SQLITE_COPY :: 0
SQLITE_RECURSIVE :: 33
SQLITE_TRACE_STMT :: 0x01
SQLITE_TRACE_PROFILE :: 0x02
SQLITE_TRACE_ROW :: 0x04
SQLITE_TRACE_CLOSE :: 0x08
SQLITE_LIMIT_LENGTH :: 0
SQLITE_LIMIT_SQL_LENGTH :: 1
SQLITE_LIMIT_COLUMN :: 2
SQLITE_LIMIT_EXPR_DEPTH :: 3
SQLITE_LIMIT_COMPOUND_SELECT :: 4
SQLITE_LIMIT_VDBE_OP :: 5
SQLITE_LIMIT_FUNCTION_ARG :: 6
SQLITE_LIMIT_ATTACHED :: 7
SQLITE_LIMIT_LIKE_PATTERN_LENGTH :: 8
SQLITE_LIMIT_VARIABLE_NUMBER :: 9
SQLITE_LIMIT_TRIGGER_DEPTH :: 10
SQLITE_LIMIT_WORKER_THREADS :: 11
SQLITE_PREPARE_PERSISTENT :: 0x01
SQLITE_PREPARE_NORMALIZE :: 0x02
SQLITE_PREPARE_NO_VTAB :: 0x04
SQLITE_INTEGER :: 1
SQLITE_FLOAT :: 2
SQLITE_BLOB :: 4
SQLITE_NULL :: 5
SQLITE_TEXT :: 3
SQLITE3_TEXT :: 3
SQLITE_UTF8 :: 1
SQLITE_UTF16LE :: 2
SQLITE_UTF16BE :: 3
SQLITE_UTF16 :: 4
SQLITE_ANY :: 5
SQLITE_UTF16_ALIGNED :: 8
SQLITE_DETERMINISTIC :: 0x000000800
SQLITE_DIRECTONLY :: 0x000080000
SQLITE_SUBTYPE :: 0x000100000
SQLITE_INNOCUOUS :: 0x000200000
SQLITE_RESULT_SUBTYPE :: 0x001000000
SQLITE_WIN32_DATA_DIRECTORY_TYPE :: 1
SQLITE_WIN32_TEMP_DIRECTORY_TYPE :: 2
SQLITE_TXN_NONE :: 0
SQLITE_TXN_READ :: 1
SQLITE_TXN_WRITE :: 2
SQLITE_INDEX_SCAN_UNIQUE :: 1
SQLITE_INDEX_CONSTRAINT_EQ :: 2
SQLITE_INDEX_CONSTRAINT_GT :: 4
SQLITE_INDEX_CONSTRAINT_LE :: 8
SQLITE_INDEX_CONSTRAINT_LT :: 16
SQLITE_INDEX_CONSTRAINT_GE :: 32
SQLITE_INDEX_CONSTRAINT_MATCH :: 64
SQLITE_INDEX_CONSTRAINT_LIKE :: 65
SQLITE_INDEX_CONSTRAINT_GLOB :: 66
SQLITE_INDEX_CONSTRAINT_REGEXP :: 67
SQLITE_INDEX_CONSTRAINT_NE :: 68
SQLITE_INDEX_CONSTRAINT_ISNOT :: 69
SQLITE_INDEX_CONSTRAINT_ISNOTNULL :: 70
SQLITE_INDEX_CONSTRAINT_ISNULL :: 71
SQLITE_INDEX_CONSTRAINT_IS :: 72
SQLITE_INDEX_CONSTRAINT_LIMIT :: 73
SQLITE_INDEX_CONSTRAINT_OFFSET :: 74
SQLITE_INDEX_CONSTRAINT_FUNCTION :: 150
SQLITE_MUTEX_FAST :: 0
SQLITE_MUTEX_RECURSIVE :: 1
SQLITE_MUTEX_STATIC_MAIN :: 2
SQLITE_MUTEX_STATIC_MEM :: 3
SQLITE_MUTEX_STATIC_MEM2 :: 4
SQLITE_MUTEX_STATIC_OPEN :: 4
SQLITE_MUTEX_STATIC_PRNG :: 5
SQLITE_MUTEX_STATIC_LRU :: 6
SQLITE_MUTEX_STATIC_LRU2 :: 7
SQLITE_MUTEX_STATIC_PMEM :: 7
SQLITE_MUTEX_STATIC_APP1 :: 8
SQLITE_MUTEX_STATIC_APP2 :: 9
SQLITE_MUTEX_STATIC_APP3 :: 10
SQLITE_MUTEX_STATIC_VFS1 :: 11
SQLITE_MUTEX_STATIC_VFS2 :: 12
SQLITE_MUTEX_STATIC_VFS3 :: 13
SQLITE_MUTEX_STATIC_MASTER :: 2
SQLITE_TESTCTRL_FIRST :: 5
SQLITE_TESTCTRL_PRNG_SAVE :: 5
SQLITE_TESTCTRL_PRNG_RESTORE :: 6
SQLITE_TESTCTRL_PRNG_RESET :: 7
SQLITE_TESTCTRL_FK_NO_ACTION :: 7
SQLITE_TESTCTRL_BITVEC_TEST :: 8
SQLITE_TESTCTRL_FAULT_INSTALL :: 9
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS :: 10
SQLITE_TESTCTRL_PENDING_BYTE :: 11
SQLITE_TESTCTRL_ASSERT :: 12
SQLITE_TESTCTRL_ALWAYS :: 13
SQLITE_TESTCTRL_RESERVE :: 14
SQLITE_TESTCTRL_JSON_SELFCHECK :: 14
SQLITE_TESTCTRL_OPTIMIZATIONS :: 15
SQLITE_TESTCTRL_ISKEYWORD :: 16
SQLITE_TESTCTRL_SCRATCHMALLOC :: 17
SQLITE_TESTCTRL_INTERNAL_FUNCTIONS :: 17
SQLITE_TESTCTRL_LOCALTIME_FAULT :: 18
SQLITE_TESTCTRL_EXPLAIN_STMT :: 19
SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD :: 19
SQLITE_TESTCTRL_NEVER_CORRUPT :: 20
SQLITE_TESTCTRL_VDBE_COVERAGE :: 21
SQLITE_TESTCTRL_BYTEORDER :: 22
SQLITE_TESTCTRL_ISINIT :: 23
SQLITE_TESTCTRL_SORTER_MMAP :: 24
SQLITE_TESTCTRL_IMPOSTER :: 25
SQLITE_TESTCTRL_PARSER_COVERAGE :: 26
SQLITE_TESTCTRL_RESULT_INTREAL :: 27
SQLITE_TESTCTRL_PRNG_SEED :: 28
SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS :: 29
SQLITE_TESTCTRL_SEEK_COUNT :: 30
SQLITE_TESTCTRL_TRACEFLAGS :: 31
SQLITE_TESTCTRL_TUNE :: 32
SQLITE_TESTCTRL_LOGEST :: 33
SQLITE_TESTCTRL_USELONGDOUBLE :: 34
SQLITE_TESTCTRL_LAST :: 34
SQLITE_STATUS_MEMORY_USED :: 0
SQLITE_STATUS_PAGECACHE_USED :: 1
SQLITE_STATUS_PAGECACHE_OVERFLOW :: 2
SQLITE_STATUS_SCRATCH_USED :: 3
SQLITE_STATUS_SCRATCH_OVERFLOW :: 4
SQLITE_STATUS_MALLOC_SIZE :: 5
SQLITE_STATUS_PARSER_STACK :: 6
SQLITE_STATUS_PAGECACHE_SIZE :: 7
SQLITE_STATUS_SCRATCH_SIZE :: 8
SQLITE_STATUS_MALLOC_COUNT :: 9
SQLITE_DBSTATUS_LOOKASIDE_USED :: 0
SQLITE_DBSTATUS_CACHE_USED :: 1
SQLITE_DBSTATUS_SCHEMA_USED :: 2
SQLITE_DBSTATUS_STMT_USED :: 3
SQLITE_DBSTATUS_LOOKASIDE_HIT :: 4
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE :: 5
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL :: 6
SQLITE_DBSTATUS_CACHE_HIT :: 7
SQLITE_DBSTATUS_CACHE_MISS :: 8
SQLITE_DBSTATUS_CACHE_WRITE :: 9
SQLITE_DBSTATUS_DEFERRED_FKS :: 10
SQLITE_DBSTATUS_CACHE_USED_SHARED :: 11
SQLITE_DBSTATUS_CACHE_SPILL :: 12
SQLITE_DBSTATUS_MAX :: 12
SQLITE_STMTSTATUS_FULLSCAN_STEP :: 1
SQLITE_STMTSTATUS_SORT :: 2
SQLITE_STMTSTATUS_AUTOINDEX :: 3
SQLITE_STMTSTATUS_VM_STEP :: 4
SQLITE_STMTSTATUS_REPREPARE :: 5
SQLITE_STMTSTATUS_RUN :: 6
SQLITE_STMTSTATUS_FILTER_MISS :: 7
SQLITE_STMTSTATUS_FILTER_HIT :: 8
SQLITE_STMTSTATUS_MEMUSED :: 99
SQLITE_CHECKPOINT_PASSIVE :: 0
SQLITE_CHECKPOINT_FULL :: 1
SQLITE_CHECKPOINT_RESTART :: 2
SQLITE_CHECKPOINT_TRUNCATE :: 3
SQLITE_VTAB_CONSTRAINT_SUPPORT :: 1
SQLITE_VTAB_INNOCUOUS :: 2
SQLITE_VTAB_DIRECTONLY :: 3
SQLITE_VTAB_USES_ALL_SCHEMAS :: 4
SQLITE_ROLLBACK :: 1
SQLITE_FAIL :: 3
SQLITE_REPLACE :: 5
SQLITE_SCANSTAT_NLOOP :: 0
SQLITE_SCANSTAT_NVISIT :: 1
SQLITE_SCANSTAT_EST :: 2
SQLITE_SCANSTAT_NAME :: 3
SQLITE_SCANSTAT_EXPLAIN :: 4
SQLITE_SCANSTAT_SELECTID :: 5
SQLITE_SCANSTAT_PARENTID :: 6
SQLITE_SCANSTAT_NCYCLE :: 7
SQLITE_SCANSTAT_COMPLEX :: 0x0001
SQLITE_SERIALIZE_NOCOPY :: 0x001
SQLITE_DESERIALIZE_FREEONCLOSE :: 1
SQLITE_DESERIALIZE_RESIZEABLE :: 2
SQLITE_DESERIALIZE_READONLY :: 4
NOT_WITHIN :: 0
PARTLY_WITHIN :: 1
FULLY_WITHIN :: 2
FTS5_TOKENIZE_QUERY :: 0x0001
FTS5_TOKENIZE_PREFIX :: 0x0002
FTS5_TOKENIZE_DOCUMENT :: 0x0004
FTS5_TOKENIZE_AUX :: 0x0008
FTS5_TOKEN_COLOCATED :: 0x0001

sqlite3 :: #distinct u64

sqlite3_file :: struct {
    pMethods: cptr(sqlite3_io_methods)
}

sqlite3_io_methods :: struct {
    iVersion: i32
    xClose: cptr(__func_hack)
    xRead: cptr(__func_hack)
    xWrite: cptr(__func_hack)
    xTruncate: cptr(__func_hack)
    xSync: cptr(__func_hack)
    xFileSize: cptr(__func_hack)
    xLock: cptr(__func_hack)
    xUnlock: cptr(__func_hack)
    xCheckReservedLock: cptr(__func_hack)
    xFileControl: cptr(__func_hack)
    xSectorSize: cptr(__func_hack)
    xDeviceCharacteristics: cptr(__func_hack)
    xShmMap: cptr(__func_hack)
    xShmLock: cptr(__func_hack)
    xShmBarrier: cptr(__func_hack)
    xShmUnmap: cptr(__func_hack)
    xFetch: cptr(__func_hack)
    xUnfetch: cptr(__func_hack)
}

sqlite3_mutex :: #distinct u64

sqlite3_api_routines :: #distinct u64

sqlite3_vfs :: struct {
    iVersion: i32
    szOsFile: i32
    mxPathname: i32
    pNext: cptr(sqlite3_vfs)
    zName: cptr(u8)
    pAppData: cptr(void)
    xOpen: cptr(__func_hack)
    xDelete: cptr(__func_hack)
    xAccess: cptr(__func_hack)
    xFullPathname: cptr(__func_hack)
    xDlOpen: cptr(__func_hack)
    xDlError: cptr(__func_hack)
    xDlSym: cptr(__func_hack)
    xDlClose: cptr(__func_hack)
    xRandomness: cptr(__func_hack)
    xSleep: cptr(__func_hack)
    xCurrentTime: cptr(__func_hack)
    xGetLastError: cptr(__func_hack)
    xCurrentTimeInt64: cptr(__func_hack)
    xSetSystemCall: cptr(__func_hack)
    xGetSystemCall: cptr(__func_hack)
    xNextSystemCall: cptr(__func_hack)
}

sqlite3_mem_methods :: struct {
    xMalloc: cptr(__func_hack)
    xFree: cptr(__func_hack)
    xRealloc: cptr(__func_hack)
    xSize: cptr(__func_hack)
    xRoundup: cptr(__func_hack)
    xInit: cptr(__func_hack)
    xShutdown: cptr(__func_hack)
    pAppData: cptr(void)
}

sqlite3_stmt :: #distinct u64

sqlite3_value :: #distinct u64

sqlite3_context :: #distinct u64

sqlite3_vtab :: struct {
    pModule: cptr(sqlite3_module)
    nRef: i32
    zErrMsg: cptr(u8)
}

sqlite3_index_info :: struct {
    nConstraint: i32
    aConstraint: cptr(sqlite3_index_constraint)
    nOrderBy: i32
    aOrderBy: cptr(sqlite3_index_orderby)
    aConstraintUsage: cptr(sqlite3_index_constraint_usage)
    idxNum: i32
    idxStr: cptr(u8)
    needToFreeIdxStr: i32
    orderByConsumed: i32
    estimatedCost: f64
    estimatedRows: sqlite3_int64
    idxFlags: i32
    colUsed: sqlite3_uint64
}

sqlite3_vtab_cursor :: struct {
    pVtab: cptr(sqlite3_vtab)
}

sqlite3_module :: struct {
    iVersion: i32
    xCreate: cptr(__func_hack)
    xConnect: cptr(__func_hack)
    xBestIndex: cptr(__func_hack)
    xDisconnect: cptr(__func_hack)
    xDestroy: cptr(__func_hack)
    xOpen: cptr(__func_hack)
    xClose: cptr(__func_hack)
    xFilter: cptr(__func_hack)
    xNext: cptr(__func_hack)
    xEof: cptr(__func_hack)
    xColumn: cptr(__func_hack)
    xRowid: cptr(__func_hack)
    xUpdate: cptr(__func_hack)
    xBegin: cptr(__func_hack)
    xSync: cptr(__func_hack)
    xCommit: cptr(__func_hack)
    xRollback: cptr(__func_hack)
    xFindFunction: cptr(__func_hack)
    xRename: cptr(__func_hack)
    xSavepoint: cptr(__func_hack)
    xRelease: cptr(__func_hack)
    xRollbackTo: cptr(__func_hack)
    xShadowName: cptr(__func_hack)
    xIntegrity: cptr(__func_hack)
}

sqlite3_index_constraint :: struct {
    iColumn: i32
    op: u8
    usable: u8
    iTermOffset: i32
}

sqlite3_index_orderby :: struct {
    iColumn: i32
    desc: u8
}

sqlite3_index_constraint_usage :: struct {
    argvIndex: i32
    omit: u8
}

sqlite3_blob :: #distinct u64

sqlite3_mutex_methods :: struct {
    xMutexInit: cptr(__func_hack)
    xMutexEnd: cptr(__func_hack)
    xMutexAlloc: cptr(__func_hack)
    xMutexFree: cptr(__func_hack)
    xMutexEnter: cptr(__func_hack)
    xMutexTry: cptr(__func_hack)
    xMutexLeave: cptr(__func_hack)
    xMutexHeld: cptr(__func_hack)
    xMutexNotheld: cptr(__func_hack)
}

sqlite3_str :: #distinct u64

sqlite3_pcache :: #distinct u64

sqlite3_pcache_page :: struct {
    pBuf: cptr(void)
    pExtra: cptr(void)
}

sqlite3_pcache_methods2 :: struct {
    iVersion: i32
    pArg: cptr(void)
    xInit: cptr(__func_hack)
    xShutdown: cptr(__func_hack)
    xCreate: cptr(__func_hack)
    xCachesize: cptr(__func_hack)
    xPagecount: cptr(__func_hack)
    xFetch: cptr(__func_hack)
    xUnpin: cptr(__func_hack)
    xRekey: cptr(__func_hack)
    xTruncate: cptr(__func_hack)
    xDestroy: cptr(__func_hack)
    xShrink: cptr(__func_hack)
}

sqlite3_pcache_methods :: struct {
    pArg: cptr(void)
    xInit: cptr(__func_hack)
    xShutdown: cptr(__func_hack)
    xCreate: cptr(__func_hack)
    xCachesize: cptr(__func_hack)
    xPagecount: cptr(__func_hack)
    xFetch: cptr(__func_hack)
    xUnpin: cptr(__func_hack)
    xRekey: cptr(__func_hack)
    xTruncate: cptr(__func_hack)
    xDestroy: cptr(__func_hack)
}

sqlite3_backup :: #distinct u64

sqlite3_snapshot :: struct {
    hidden: [48] u8
}

sqlite3_rtree_geometry :: struct {
    pContext: cptr(void)
    nParam: i32
    aParam: cptr(sqlite3_rtree_dbl)
    pUser: cptr(void)
    xDelUser: cptr(__func_hack)
}

sqlite3_rtree_query_info :: struct {
    pContext: cptr(void)
    nParam: i32
    aParam: cptr(sqlite3_rtree_dbl)
    pUser: cptr(void)
    xDelUser: cptr(__func_hack)
    aCoord: cptr(sqlite3_rtree_dbl)
    anQueue: cptr(u32)
    nCoord: i32
    iLevel: i32
    mxLevel: i32
    iRowid: sqlite3_int64
    rParentScore: sqlite3_rtree_dbl
    eParentWithin: i32
    eWithin: i32
    rScore: sqlite3_rtree_dbl
    apSqlParam: cptr(sqlite3_value)
}

Fts5ExtensionApi :: struct {
    iVersion: i32
    xUserData: cptr(__func_hack)
    xColumnCount: cptr(__func_hack)
    xRowCount: cptr(__func_hack)
    xColumnTotalSize: cptr(__func_hack)
    xTokenize: cptr(__func_hack)
    xPhraseCount: cptr(__func_hack)
    xPhraseSize: cptr(__func_hack)
    xInstCount: cptr(__func_hack)
    xInst: cptr(__func_hack)
    xRowid: cptr(__func_hack)
    xColumnText: cptr(__func_hack)
    xColumnSize: cptr(__func_hack)
    xQueryPhrase: cptr(__func_hack)
    xSetAuxdata: cptr(__func_hack)
    xGetAuxdata: cptr(__func_hack)
    xPhraseFirst: cptr(__func_hack)
    xPhraseNext: cptr(__func_hack)
    xPhraseFirstColumn: cptr(__func_hack)
    xPhraseNextColumn: cptr(__func_hack)
    xQueryToken: cptr(__func_hack)
    xInstToken: cptr(__func_hack)
}

Fts5Context :: #distinct u64

Fts5PhraseIter :: struct {
    a: cptr(u8)
    b: cptr(u8)
}

Fts5Tokenizer :: #distinct u64

fts5_tokenizer :: struct {
    xCreate: cptr(__func_hack)
    xDelete: cptr(__func_hack)
    xTokenize: cptr(__func_hack)
}

fts5_api :: struct {
    iVersion: i32
    xCreateTokenizer: cptr(__func_hack)
    xFindTokenizer: cptr(__func_hack)
    xCreateFunction: cptr(__func_hack)
}


#local __foreign_block :: #foreign "onyx_sqlite3" {
    sqlite3_libversion :: () -> cptr(u8) ---
    sqlite3_sourceid :: () -> cptr(u8) ---
    sqlite3_libversion_number :: () -> i32 ---
    sqlite3_compileoption_used :: (zOptName: [&] u8) -> i32 ---
    sqlite3_compileoption_get :: (N: i32) -> cptr(u8) ---
    sqlite3_threadsafe :: () -> i32 ---
    sqlite3_close :: (_0: sqlite3) -> i32 ---
    sqlite3_close_v2 :: (_0: sqlite3) -> i32 ---
    sqlite3_exec :: (_0: sqlite3, sql: [&] u8, callback: [&] __func_hack, _3: [&] void, errmsg: [&] cptr(u8)) -> i32 ---
    sqlite3_initialize :: () -> i32 ---
    sqlite3_shutdown :: () -> i32 ---
    sqlite3_os_init :: () -> i32 ---
    sqlite3_os_end :: () -> i32 ---
    sqlite3_config :: (_0: i32) -> i32 ---
    sqlite3_db_config :: (_0: sqlite3, op: i32) -> i32 ---
    sqlite3_extended_result_codes :: (_0: sqlite3, onoff: i32) -> i32 ---
    sqlite3_last_insert_rowid :: (_0: sqlite3) -> sqlite3_int64 ---
    sqlite3_set_last_insert_rowid :: (_0: sqlite3, _1: sqlite3_int64) -> void ---
    sqlite3_changes :: (_0: sqlite3) -> i32 ---
    sqlite3_changes64 :: (_0: sqlite3) -> sqlite3_int64 ---
    sqlite3_total_changes :: (_0: sqlite3) -> i32 ---
    sqlite3_total_changes64 :: (_0: sqlite3) -> sqlite3_int64 ---
    sqlite3_interrupt :: (_0: sqlite3) -> void ---
    sqlite3_is_interrupted :: (_0: sqlite3) -> i32 ---
    sqlite3_complete :: (sql: [&] u8) -> i32 ---
    sqlite3_complete16 :: (sql: [&] void) -> i32 ---
    sqlite3_busy_handler :: (_0: sqlite3, _1: [&] __func_hack, _2: [&] void) -> i32 ---
    sqlite3_busy_timeout :: (_0: sqlite3, ms: i32) -> i32 ---
    sqlite3_get_table :: (db: sqlite3, zSql: [&] u8, pazResult: [&] cptr(cptr(u8)), pnRow: [&] i32, pnColumn: [&] i32, pzErrmsg: [&] cptr(u8)) -> i32 ---
    sqlite3_free_table :: (result: [&] cptr(u8)) -> void ---
    sqlite3_mprintf :: (_0: [&] u8) -> cptr(u8) ---
    sqlite3_vmprintf :: (_0: [&] u8, va_list: i32) -> cptr(u8) ---
    sqlite3_snprintf :: (_0: i32, _1: [&] u8, _2: [&] u8) -> cptr(u8) ---
    sqlite3_vsnprintf :: (_0: i32, _1: [&] u8, _2: [&] u8, va_list: i32) -> cptr(u8) ---
    sqlite3_malloc :: (_0: i32) -> cptr(void) ---
    sqlite3_malloc64 :: (_0: sqlite3_uint64) -> cptr(void) ---
    sqlite3_realloc :: (_0: [&] void, _1: i32) -> cptr(void) ---
    sqlite3_realloc64 :: (_0: [&] void, _1: sqlite3_uint64) -> cptr(void) ---
    sqlite3_free :: (_0: [&] void) -> void ---
    sqlite3_msize :: (_0: [&] void) -> sqlite3_uint64 ---
    sqlite3_memory_used :: () -> sqlite3_int64 ---
    sqlite3_memory_highwater :: (resetFlag: i32) -> sqlite3_int64 ---
    sqlite3_randomness :: (N: i32, P: [&] void) -> void ---
    sqlite3_set_authorizer :: (_0: sqlite3, xAuth: [&] __func_hack, pUserData: [&] void) -> i32 ---
    sqlite3_trace :: (_0: sqlite3, xTrace: [&] __func_hack, _2: [&] void) -> cptr(void) ---
    sqlite3_profile :: (_0: sqlite3, xProfile: [&] __func_hack, _2: [&] void) -> cptr(void) ---
    sqlite3_trace_v2 :: (_0: sqlite3, uMask: u32, xCallback: [&] __func_hack, pCtx: [&] void) -> i32 ---
    sqlite3_progress_handler :: (_0: sqlite3, _1: i32, _2: [&] __func_hack, _3: [&] void) -> void ---
    sqlite3_open :: (filename: [&] u8, ppDb: [&] sqlite3) -> i32 ---
    sqlite3_open16 :: (filename: [&] void, ppDb: [&] sqlite3) -> i32 ---
    sqlite3_open_v2 :: (filename: [&] u8, ppDb: [&] sqlite3, flags: i32, zVfs: [&] u8) -> i32 ---
    sqlite3_uri_parameter :: (z: sqlite3_filename, zParam: [&] u8) -> cptr(u8) ---
    sqlite3_uri_boolean :: (z: sqlite3_filename, zParam: [&] u8, bDefault: i32) -> i32 ---
    sqlite3_uri_int64 :: (_0: sqlite3_filename, _1: [&] u8, _2: sqlite3_int64) -> sqlite3_int64 ---
    sqlite3_uri_key :: (z: sqlite3_filename, N: i32) -> cptr(u8) ---
    sqlite3_filename_database :: (_0: sqlite3_filename) -> cptr(u8) ---
    sqlite3_filename_journal :: (_0: sqlite3_filename) -> cptr(u8) ---
    sqlite3_filename_wal :: (_0: sqlite3_filename) -> cptr(u8) ---
    sqlite3_database_file_object :: (_0: [&] u8) -> cptr(sqlite3_file) ---
    sqlite3_create_filename :: (zDatabase: [&] u8, zJournal: [&] u8, zWal: [&] u8, nParam: i32, azParam: [&] cptr(u8)) -> sqlite3_filename ---
    sqlite3_free_filename :: (_0: sqlite3_filename) -> void ---
    sqlite3_errcode :: (db: sqlite3) -> i32 ---
    sqlite3_extended_errcode :: (db: sqlite3) -> i32 ---
    sqlite3_errmsg :: (_0: sqlite3) -> cptr(u8) ---
    sqlite3_errmsg16 :: (_0: sqlite3) -> cptr(void) ---
    sqlite3_errstr :: (_0: i32) -> cptr(u8) ---
    sqlite3_error_offset :: (db: sqlite3) -> i32 ---
    sqlite3_limit :: (_0: sqlite3, id: i32, newVal: i32) -> i32 ---
    sqlite3_prepare :: (db: sqlite3, zSql: [&] u8, nByte: i32, ppStmt: [&] sqlite3_stmt, pzTail: [&] cptr(u8)) -> i32 ---
    sqlite3_prepare_v2 :: (db: sqlite3, zSql: [&] u8, nByte: i32, ppStmt: [&] sqlite3_stmt, pzTail: [&] cptr(u8)) -> i32 ---
    sqlite3_prepare_v3 :: (db: sqlite3, zSql: [&] u8, nByte: i32, prepFlags: u32, ppStmt: [&] sqlite3_stmt, pzTail: [&] cptr(u8)) -> i32 ---
    sqlite3_prepare16 :: (db: sqlite3, zSql: [&] void, nByte: i32, ppStmt: [&] sqlite3_stmt, pzTail: [&] cptr(void)) -> i32 ---
    sqlite3_prepare16_v2 :: (db: sqlite3, zSql: [&] void, nByte: i32, ppStmt: [&] sqlite3_stmt, pzTail: [&] cptr(void)) -> i32 ---
    sqlite3_prepare16_v3 :: (db: sqlite3, zSql: [&] void, nByte: i32, prepFlags: u32, ppStmt: [&] sqlite3_stmt, pzTail: [&] cptr(void)) -> i32 ---
    sqlite3_sql :: (pStmt: sqlite3_stmt) -> cptr(u8) ---
    sqlite3_expanded_sql :: (pStmt: sqlite3_stmt) -> cptr(u8) ---
    sqlite3_stmt_readonly :: (pStmt: sqlite3_stmt) -> i32 ---
    sqlite3_stmt_isexplain :: (pStmt: sqlite3_stmt) -> i32 ---
    sqlite3_stmt_explain :: (pStmt: sqlite3_stmt, eMode: i32) -> i32 ---
    sqlite3_stmt_busy :: (_0: sqlite3_stmt) -> i32 ---
    sqlite3_bind_blob :: (_0: sqlite3_stmt, _1: i32, _2: [&] void, n: i32, _4: [&] __func_hack) -> i32 ---
    sqlite3_bind_blob64 :: (_0: sqlite3_stmt, _1: i32, _2: [&] void, _3: sqlite3_uint64, _4: [&] __func_hack) -> i32 ---
    sqlite3_bind_double :: (_0: sqlite3_stmt, _1: i32, _2: f64) -> i32 ---
    sqlite3_bind_int :: (_0: sqlite3_stmt, _1: i32, _2: i32) -> i32 ---
    sqlite3_bind_int64 :: (_0: sqlite3_stmt, _1: i32, _2: sqlite3_int64) -> i32 ---
    sqlite3_bind_null :: (_0: sqlite3_stmt, _1: i32) -> i32 ---
    sqlite3_bind_text :: (_0: sqlite3_stmt, _1: i32, _2: [&] u8, _3: i32, _4: [&] __func_hack) -> i32 ---
    sqlite3_bind_text16 :: (_0: sqlite3_stmt, _1: i32, _2: [&] void, _3: i32, _4: [&] __func_hack) -> i32 ---
    sqlite3_bind_text64 :: (_0: sqlite3_stmt, _1: i32, _2: [&] u8, _3: sqlite3_uint64, _4: [&] __func_hack, encoding: u8) -> i32 ---
    sqlite3_bind_value :: (_0: sqlite3_stmt, _1: i32, _2: [&] sqlite3_value) -> i32 ---
    sqlite3_bind_pointer :: (_0: sqlite3_stmt, _1: i32, _2: [&] void, _3: [&] u8, _4: [&] __func_hack) -> i32 ---
    sqlite3_bind_zeroblob :: (_0: sqlite3_stmt, _1: i32, n: i32) -> i32 ---
    sqlite3_bind_zeroblob64 :: (_0: sqlite3_stmt, _1: i32, _2: sqlite3_uint64) -> i32 ---
    sqlite3_bind_parameter_count :: (_0: sqlite3_stmt) -> i32 ---
    sqlite3_bind_parameter_name :: (_0: sqlite3_stmt, _1: i32) -> cptr(u8) ---
    sqlite3_bind_parameter_index :: (_0: sqlite3_stmt, zName: [&] u8) -> i32 ---
    sqlite3_clear_bindings :: (_0: sqlite3_stmt) -> i32 ---
    sqlite3_column_count :: (pStmt: sqlite3_stmt) -> i32 ---
    sqlite3_column_name :: (_0: sqlite3_stmt, N: i32) -> cptr(u8) ---
    sqlite3_column_name16 :: (_0: sqlite3_stmt, N: i32) -> cptr(void) ---
    sqlite3_column_database_name :: (_0: sqlite3_stmt, _1: i32) -> cptr(u8) ---
    sqlite3_column_database_name16 :: (_0: sqlite3_stmt, _1: i32) -> cptr(void) ---
    sqlite3_column_table_name :: (_0: sqlite3_stmt, _1: i32) -> cptr(u8) ---
    sqlite3_column_table_name16 :: (_0: sqlite3_stmt, _1: i32) -> cptr(void) ---
    sqlite3_column_origin_name :: (_0: sqlite3_stmt, _1: i32) -> cptr(u8) ---
    sqlite3_column_origin_name16 :: (_0: sqlite3_stmt, _1: i32) -> cptr(void) ---
    sqlite3_column_decltype :: (_0: sqlite3_stmt, _1: i32) -> cptr(u8) ---
    sqlite3_column_decltype16 :: (_0: sqlite3_stmt, _1: i32) -> cptr(void) ---
    sqlite3_step :: (_0: sqlite3_stmt) -> i32 ---
    sqlite3_data_count :: (pStmt: sqlite3_stmt) -> i32 ---
    sqlite3_column_blob :: (_0: sqlite3_stmt, iCol: i32) -> cptr(void) ---
    sqlite3_column_double :: (_0: sqlite3_stmt, iCol: i32) -> f64 ---
    sqlite3_column_int :: (_0: sqlite3_stmt, iCol: i32) -> i32 ---
    sqlite3_column_int64 :: (_0: sqlite3_stmt, iCol: i32) -> sqlite3_int64 ---
    sqlite3_column_text :: (_0: sqlite3_stmt, iCol: i32) -> cptr(u8) ---
    sqlite3_column_text16 :: (_0: sqlite3_stmt, iCol: i32) -> cptr(void) ---
    sqlite3_column_value :: (_0: sqlite3_stmt, iCol: i32) -> sqlite3_value ---
    sqlite3_column_bytes :: (_0: sqlite3_stmt, iCol: i32) -> i32 ---
    sqlite3_column_bytes16 :: (_0: sqlite3_stmt, iCol: i32) -> i32 ---
    sqlite3_column_type :: (_0: sqlite3_stmt, iCol: i32) -> i32 ---
    sqlite3_finalize :: (pStmt: sqlite3_stmt) -> i32 ---
    sqlite3_reset :: (pStmt: sqlite3_stmt) -> i32 ---
    sqlite3_create_function :: (db: sqlite3, zFunctionName: [&] u8, nArg: i32, eTextRep: i32, pApp: [&] void, xFunc: [&] __func_hack, xStep: [&] __func_hack, xFinal: [&] __func_hack) -> i32 ---
    sqlite3_create_function16 :: (db: sqlite3, zFunctionName: [&] void, nArg: i32, eTextRep: i32, pApp: [&] void, xFunc: [&] __func_hack, xStep: [&] __func_hack, xFinal: [&] __func_hack) -> i32 ---
    sqlite3_create_function_v2 :: (db: sqlite3, zFunctionName: [&] u8, nArg: i32, eTextRep: i32, pApp: [&] void, xFunc: [&] __func_hack, xStep: [&] __func_hack, xFinal: [&] __func_hack, xDestroy: [&] __func_hack) -> i32 ---
    sqlite3_create_window_function :: (db: sqlite3, zFunctionName: [&] u8, nArg: i32, eTextRep: i32, pApp: [&] void, xStep: [&] __func_hack, xFinal: [&] __func_hack, xValue: [&] __func_hack, xInverse: [&] __func_hack, xDestroy: [&] __func_hack) -> i32 ---
    sqlite3_aggregate_count :: (_0: sqlite3_context) -> i32 ---
    sqlite3_expired :: (_0: sqlite3_stmt) -> i32 ---
    sqlite3_transfer_bindings :: (_0: sqlite3_stmt, _1: sqlite3_stmt) -> i32 ---
    sqlite3_global_recover :: () -> i32 ---
    sqlite3_thread_cleanup :: () -> void ---
    sqlite3_memory_alarm :: (_0: [&] __func_hack, _1: [&] void, _2: sqlite3_int64) -> i32 ---
    sqlite3_value_blob :: (_0: sqlite3_value) -> cptr(void) ---
    sqlite3_value_double :: (_0: sqlite3_value) -> f64 ---
    sqlite3_value_int :: (_0: sqlite3_value) -> i32 ---
    sqlite3_value_int64 :: (_0: sqlite3_value) -> sqlite3_int64 ---
    sqlite3_value_pointer :: (_0: sqlite3_value, _1: [&] u8) -> cptr(void) ---
    sqlite3_value_text :: (_0: sqlite3_value) -> cptr(u8) ---
    sqlite3_value_text16 :: (_0: sqlite3_value) -> cptr(void) ---
    sqlite3_value_text16le :: (_0: sqlite3_value) -> cptr(void) ---
    sqlite3_value_text16be :: (_0: sqlite3_value) -> cptr(void) ---
    sqlite3_value_bytes :: (_0: sqlite3_value) -> i32 ---
    sqlite3_value_bytes16 :: (_0: sqlite3_value) -> i32 ---
    sqlite3_value_type :: (_0: sqlite3_value) -> i32 ---
    sqlite3_value_numeric_type :: (_0: sqlite3_value) -> i32 ---
    sqlite3_value_nochange :: (_0: sqlite3_value) -> i32 ---
    sqlite3_value_frombind :: (_0: sqlite3_value) -> i32 ---
    sqlite3_value_encoding :: (_0: sqlite3_value) -> i32 ---
    sqlite3_value_subtype :: (_0: sqlite3_value) -> u32 ---
    sqlite3_value_dup :: (_0: [&] sqlite3_value) -> sqlite3_value ---
    sqlite3_value_free :: (_0: sqlite3_value) -> void ---
    sqlite3_aggregate_context :: (_0: sqlite3_context, nBytes: i32) -> cptr(void) ---
    sqlite3_user_data :: (_0: sqlite3_context) -> cptr(void) ---
    sqlite3_context_db_handle :: (_0: sqlite3_context) -> sqlite3 ---
    sqlite3_get_auxdata :: (_0: sqlite3_context, N: i32) -> cptr(void) ---
    sqlite3_set_auxdata :: (_0: sqlite3_context, N: i32, _2: [&] void, _3: [&] __func_hack) -> void ---
    sqlite3_result_blob :: (_0: sqlite3_context, _1: [&] void, _2: i32, _3: [&] __func_hack) -> void ---
    sqlite3_result_blob64 :: (_0: sqlite3_context, _1: [&] void, _2: sqlite3_uint64, _3: [&] __func_hack) -> void ---
    sqlite3_result_double :: (_0: sqlite3_context, _1: f64) -> void ---
    sqlite3_result_error :: (_0: sqlite3_context, _1: [&] u8, _2: i32) -> void ---
    sqlite3_result_error16 :: (_0: sqlite3_context, _1: [&] void, _2: i32) -> void ---
    sqlite3_result_error_toobig :: (_0: sqlite3_context) -> void ---
    sqlite3_result_error_nomem :: (_0: sqlite3_context) -> void ---
    sqlite3_result_error_code :: (_0: sqlite3_context, _1: i32) -> void ---
    sqlite3_result_int :: (_0: sqlite3_context, _1: i32) -> void ---
    sqlite3_result_int64 :: (_0: sqlite3_context, _1: sqlite3_int64) -> void ---
    sqlite3_result_null :: (_0: sqlite3_context) -> void ---
    sqlite3_result_text :: (_0: sqlite3_context, _1: [&] u8, _2: i32, _3: [&] __func_hack) -> void ---
    sqlite3_result_text64 :: (_0: sqlite3_context, _1: [&] u8, _2: sqlite3_uint64, _3: [&] __func_hack, encoding: u8) -> void ---
    sqlite3_result_text16 :: (_0: sqlite3_context, _1: [&] void, _2: i32, _3: [&] __func_hack) -> void ---
    sqlite3_result_text16le :: (_0: sqlite3_context, _1: [&] void, _2: i32, _3: [&] __func_hack) -> void ---
    sqlite3_result_text16be :: (_0: sqlite3_context, _1: [&] void, _2: i32, _3: [&] __func_hack) -> void ---
    sqlite3_result_value :: (_0: sqlite3_context, _1: sqlite3_value) -> void ---
    sqlite3_result_pointer :: (_0: sqlite3_context, _1: [&] void, _2: [&] u8, _3: [&] __func_hack) -> void ---
    sqlite3_result_zeroblob :: (_0: sqlite3_context, n: i32) -> void ---
    sqlite3_result_zeroblob64 :: (_0: sqlite3_context, n: sqlite3_uint64) -> i32 ---
    sqlite3_result_subtype :: (_0: sqlite3_context, _1: u32) -> void ---
    sqlite3_create_collation :: (_0: sqlite3, zName: [&] u8, eTextRep: i32, pArg: [&] void, xCompare: [&] __func_hack) -> i32 ---
    sqlite3_create_collation_v2 :: (_0: sqlite3, zName: [&] u8, eTextRep: i32, pArg: [&] void, xCompare: [&] __func_hack, xDestroy: [&] __func_hack) -> i32 ---
    sqlite3_create_collation16 :: (_0: sqlite3, zName: [&] void, eTextRep: i32, pArg: [&] void, xCompare: [&] __func_hack) -> i32 ---
    sqlite3_collation_needed :: (_0: sqlite3, _1: [&] void, _2: [&] __func_hack) -> i32 ---
    sqlite3_collation_needed16 :: (_0: sqlite3, _1: [&] void, _2: [&] __func_hack) -> i32 ---
    sqlite3_sleep :: (_0: i32) -> i32 ---
    sqlite3_get_autocommit :: (_0: sqlite3) -> i32 ---
    sqlite3_db_handle :: (_0: sqlite3_stmt) -> sqlite3 ---
    sqlite3_db_name :: (db: sqlite3, N: i32) -> cptr(u8) ---
    sqlite3_db_filename :: (db: sqlite3, zDbName: [&] u8) -> sqlite3_filename ---
    sqlite3_db_readonly :: (db: sqlite3, zDbName: [&] u8) -> i32 ---
    sqlite3_txn_state :: (_0: sqlite3, zSchema: [&] u8) -> i32 ---
    sqlite3_next_stmt :: (pDb: sqlite3, pStmt: sqlite3_stmt) -> sqlite3_stmt ---
    sqlite3_commit_hook :: (_0: sqlite3, _1: [&] __func_hack, _2: [&] void) -> cptr(void) ---
    sqlite3_rollback_hook :: (_0: sqlite3, _1: [&] __func_hack, _2: [&] void) -> cptr(void) ---
    sqlite3_autovacuum_pages :: (db: sqlite3, _1: [&] __func_hack, _2: [&] void, _3: [&] __func_hack) -> i32 ---
    sqlite3_update_hook :: (_0: sqlite3, _1: [&] __func_hack, _2: [&] void) -> cptr(void) ---
    sqlite3_enable_shared_cache :: (_0: i32) -> i32 ---
    sqlite3_release_memory :: (_0: i32) -> i32 ---
    sqlite3_db_release_memory :: (_0: sqlite3) -> i32 ---
    sqlite3_soft_heap_limit64 :: (N: sqlite3_int64) -> sqlite3_int64 ---
    sqlite3_soft_heap_limit :: (N: i32) -> void ---
    sqlite3_table_column_metadata :: (db: sqlite3, zDbName: [&] u8, zTableName: [&] u8, zColumnName: [&] u8, pzDataType: [&] cptr(u8), pzCollSeq: [&] cptr(u8), pNotNull: [&] i32, pPrimaryKey: [&] i32, pAutoinc: [&] i32) -> i32 ---
    sqlite3_auto_extension :: (xEntryPoint: [&] __func_hack) -> i32 ---
    sqlite3_cancel_auto_extension :: (xEntryPoint: [&] __func_hack) -> i32 ---
    sqlite3_reset_auto_extension :: () -> void ---
    sqlite3_create_module :: (db: sqlite3, zName: [&] u8, p: [&] sqlite3_module, pClientData: [&] void) -> i32 ---
    sqlite3_create_module_v2 :: (db: sqlite3, zName: [&] u8, p: [&] sqlite3_module, pClientData: [&] void, xDestroy: [&] __func_hack) -> i32 ---
    sqlite3_drop_modules :: (db: sqlite3, azKeep: [&] cptr(u8)) -> i32 ---
    sqlite3_declare_vtab :: (_0: sqlite3, zSQL: [&] u8) -> i32 ---
    sqlite3_overload_function :: (_0: sqlite3, zFuncName: [&] u8, nArg: i32) -> i32 ---
    sqlite3_blob_open :: (_0: sqlite3, zDb: [&] u8, zTable: [&] u8, zColumn: [&] u8, iRow: sqlite3_int64, flags: i32, ppBlob: [&] sqlite3_blob) -> i32 ---
    sqlite3_blob_reopen :: (_0: sqlite3_blob, _1: sqlite3_int64) -> i32 ---
    sqlite3_blob_close :: (_0: sqlite3_blob) -> i32 ---
    sqlite3_blob_bytes :: (_0: sqlite3_blob) -> i32 ---
    sqlite3_blob_read :: (_0: sqlite3_blob, Z: [&] void, N: i32, iOffset: i32) -> i32 ---
    sqlite3_blob_write :: (_0: sqlite3_blob, z: [&] void, n: i32, iOffset: i32) -> i32 ---
    sqlite3_vfs_find :: (zVfsName: [&] u8) -> cptr(sqlite3_vfs) ---
    sqlite3_vfs_register :: (_0: [&] sqlite3_vfs, makeDflt: i32) -> i32 ---
    sqlite3_vfs_unregister :: (_0: [&] sqlite3_vfs) -> i32 ---
    sqlite3_mutex_alloc :: (_0: i32) -> sqlite3_mutex ---
    sqlite3_mutex_free :: (_0: sqlite3_mutex) -> void ---
    sqlite3_mutex_enter :: (_0: sqlite3_mutex) -> void ---
    sqlite3_mutex_try :: (_0: sqlite3_mutex) -> i32 ---
    sqlite3_mutex_leave :: (_0: sqlite3_mutex) -> void ---
    sqlite3_db_mutex :: (_0: sqlite3) -> sqlite3_mutex ---
    sqlite3_file_control :: (_0: sqlite3, zDbName: [&] u8, op: i32, _3: [&] void) -> i32 ---
    sqlite3_test_control :: (op: i32) -> i32 ---
    sqlite3_keyword_count :: () -> i32 ---
    sqlite3_keyword_name :: (_0: i32, _1: [&] cptr(u8), _2: [&] i32) -> i32 ---
    sqlite3_keyword_check :: (_0: [&] u8, _1: i32) -> i32 ---
    sqlite3_str_new :: (_0: sqlite3) -> sqlite3_str ---
    sqlite3_str_finish :: (_0: sqlite3_str) -> cptr(u8) ---
    sqlite3_str_appendf :: (_0: sqlite3_str, zFormat: [&] u8) -> void ---
    sqlite3_str_vappendf :: (_0: sqlite3_str, zFormat: [&] u8, va_list: i32) -> void ---
    sqlite3_str_append :: (_0: sqlite3_str, zIn: [&] u8, N: i32) -> void ---
    sqlite3_str_appendall :: (_0: sqlite3_str, zIn: [&] u8) -> void ---
    sqlite3_str_appendchar :: (_0: sqlite3_str, N: i32, C: u8) -> void ---
    sqlite3_str_reset :: (_0: sqlite3_str) -> void ---
    sqlite3_str_errcode :: (_0: sqlite3_str) -> i32 ---
    sqlite3_str_length :: (_0: sqlite3_str) -> i32 ---
    sqlite3_str_value :: (_0: sqlite3_str) -> cptr(u8) ---
    sqlite3_status :: (op: i32, pCurrent: [&] i32, pHighwater: [&] i32, resetFlag: i32) -> i32 ---
    sqlite3_status64 :: (op: i32, pCurrent: [&] sqlite3_int64, pHighwater: [&] sqlite3_int64, resetFlag: i32) -> i32 ---
    sqlite3_db_status :: (_0: sqlite3, op: i32, pCur: [&] i32, pHiwtr: [&] i32, resetFlg: i32) -> i32 ---
    sqlite3_stmt_status :: (_0: sqlite3_stmt, op: i32, resetFlg: i32) -> i32 ---
    sqlite3_backup_init :: (pDest: sqlite3, zDestName: [&] u8, pSource: sqlite3, zSourceName: [&] u8) -> sqlite3_backup ---
    sqlite3_backup_step :: (p: sqlite3_backup, nPage: i32) -> i32 ---
    sqlite3_backup_finish :: (p: sqlite3_backup) -> i32 ---
    sqlite3_backup_remaining :: (p: sqlite3_backup) -> i32 ---
    sqlite3_backup_pagecount :: (p: sqlite3_backup) -> i32 ---
    sqlite3_stricmp :: (_0: [&] u8, _1: [&] u8) -> i32 ---
    sqlite3_strnicmp :: (_0: [&] u8, _1: [&] u8, _2: i32) -> i32 ---
    sqlite3_strglob :: (zGlob: [&] u8, zStr: [&] u8) -> i32 ---
    sqlite3_strlike :: (zGlob: [&] u8, zStr: [&] u8, cEsc: u32) -> i32 ---
    sqlite3_log :: (iErrCode: i32, zFormat: [&] u8) -> void ---
    sqlite3_wal_hook :: (_0: sqlite3, _1: [&] __func_hack, _2: [&] void) -> cptr(void) ---
    sqlite3_wal_autocheckpoint :: (db: sqlite3, N: i32) -> i32 ---
    sqlite3_wal_checkpoint :: (db: sqlite3, zDb: [&] u8) -> i32 ---
    sqlite3_wal_checkpoint_v2 :: (db: sqlite3, zDb: [&] u8, eMode: i32, pnLog: [&] i32, pnCkpt: [&] i32) -> i32 ---
    sqlite3_vtab_config :: (_0: sqlite3, op: i32) -> i32 ---
    sqlite3_vtab_on_conflict :: (_0: sqlite3) -> i32 ---
    sqlite3_vtab_nochange :: (_0: sqlite3_context) -> i32 ---
    sqlite3_vtab_collation :: (_0: [&] sqlite3_index_info, _1: i32) -> cptr(u8) ---
    sqlite3_vtab_distinct :: (_0: [&] sqlite3_index_info) -> i32 ---
    sqlite3_vtab_in :: (_0: [&] sqlite3_index_info, iCons: i32, bHandle: i32) -> i32 ---
    sqlite3_vtab_in_first :: (pVal: sqlite3_value, ppOut: [&] sqlite3_value) -> i32 ---
    sqlite3_vtab_in_next :: (pVal: sqlite3_value, ppOut: [&] sqlite3_value) -> i32 ---
    sqlite3_vtab_rhs_value :: (_0: [&] sqlite3_index_info, _1: i32, ppVal: [&] sqlite3_value) -> i32 ---
    sqlite3_stmt_scanstatus :: (pStmt: sqlite3_stmt, idx: i32, iScanStatusOp: i32, pOut: [&] void) -> i32 ---
    sqlite3_stmt_scanstatus_v2 :: (pStmt: sqlite3_stmt, idx: i32, iScanStatusOp: i32, flags: i32, pOut: [&] void) -> i32 ---
    sqlite3_stmt_scanstatus_reset :: (_0: sqlite3_stmt) -> void ---
    sqlite3_db_cacheflush :: (_0: sqlite3) -> i32 ---
    sqlite3_system_errno :: (_0: sqlite3) -> i32 ---
    sqlite3_snapshot_get :: (db: sqlite3, zSchema: [&] u8, ppSnapshot: [&] cptr(sqlite3_snapshot)) -> i32 ---
    sqlite3_snapshot_open :: (db: sqlite3, zSchema: [&] u8, pSnapshot: [&] sqlite3_snapshot) -> i32 ---
    sqlite3_snapshot_free :: (_0: [&] sqlite3_snapshot) -> void ---
    sqlite3_snapshot_cmp :: (p1: [&] sqlite3_snapshot, p2: [&] sqlite3_snapshot) -> i32 ---
    sqlite3_snapshot_recover :: (db: sqlite3, zDb: [&] u8) -> i32 ---
    sqlite3_serialize :: (db: sqlite3, zSchema: [&] u8, piSize: [&] sqlite3_int64, mFlags: u32) -> cptr(u8) ---
    sqlite3_deserialize :: (db: sqlite3, zSchema: [&] u8, pData: [&] u8, szDb: sqlite3_int64, szBuf: sqlite3_int64, mFlags: u32) -> i32 ---
    sqlite3_rtree_geometry_callback :: (db: sqlite3, zGeom: [&] u8, xGeom: [&] __func_hack, pContext: [&] void) -> i32 ---
    sqlite3_rtree_query_callback :: (db: sqlite3, zQueryFunc: [&] u8, xQueryFunc: [&] __func_hack, pContext: [&] void, xDestructor: [&] __func_hack) -> i32 ---
}

